{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_18-41dc38372ca403fb22866fa43af661e01e736eb7",
  "solcVersion": "0.8.18",
  "solcLongVersion": "0.8.18+commit.87f61d96",
  "userSourceNameMap": {
    "src/Blockchain/contracts/Diploma.sol": "project/src/Blockchain/contracts/Diploma.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "paris",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/src/Blockchain/contracts/Diploma.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract DiplomaRegistry {\r\n    // Structure représentant un diplôme\r\n    struct Diploma {\r\n        string ipfsHash;   // le hash du fichier JSON sur IPFS\r\n        address owner;     // l'adresse du propriétaire actuel\r\n        bool valid;        // indicateur de validité (par ex. pour révoquer si besoin)\r\n    }\r\n\r\n    // Mapping d'un identifiant de diplôme vers les informations du diplôme\r\n    mapping(uint256 => Diploma) public diplomas;\r\n    uint256 public diplomaCount;  // compteur pour assigner des IDs de diplôme\r\n\r\n    // Events pour suivre les opérations (création, transfert)\r\n    event DiplomaIssued(uint256 indexed diplomaId, address indexed owner, string ipfsHash);\r\n    event DiplomaTransferred(uint256 indexed diplomaId, address indexed oldOwner, address indexed newOwner);\r\n\r\n    // Création d'un nouveau diplôme. L'adresse appelante devient propriétaire.\r\n    function issueDiploma(string memory ipfsHash) public returns (uint256) {\r\n        uint256 newId = diplomaCount;\r\n        diplomas[newId] = Diploma(ipfsHash, msg.sender, true);\r\n        diplomaCount += 1;\r\n        emit DiplomaIssued(newId, msg.sender, ipfsHash);\r\n        return newId;\r\n    }\r\n\r\n    // Transfert d'un diplôme existant à un nouveau propriétaire.\r\n    function transferDiploma(uint256 diplomaId, address newOwner) public {\r\n        require(diplomaId < diplomaCount, \"Diploma does not exist\");\r\n        Diploma storage diploma = diplomas[diplomaId];\r\n        require(diploma.valid, \"Diploma is not valid\");\r\n        require(msg.sender == diploma.owner, \"Only the owner can transfer this diploma\");\r\n        address previousOwner = diploma.owner;\r\n        diploma.owner = newOwner;\r\n        emit DiplomaTransferred(diplomaId, previousOwner, newOwner);\r\n    }\r\n\r\n    // (Optionnel) Invalider un diplôme (ex: si erreur ou révocation)\r\n    function revokeDiploma(uint256 diplomaId) public {\r\n        require(diplomaId < diplomaCount, \"Diploma does not exist\");\r\n        Diploma storage diploma = diplomas[diplomaId];\r\n        require(msg.sender == diploma.owner, \"Only owner can revoke\");\r\n        diploma.valid = false;\r\n        // On pourrait émettre un event de révocation si besoin\r\n    }\r\n\r\n    // Récupérer les infos d'un diplôme (owner, hash, validité)\r\n    function getDiploma(uint256 diplomaId) public view returns (string memory, address, bool) {\r\n        require(diplomaId < diplomaCount, \"Diploma does not exist\");\r\n        Diploma memory d = diplomas[diplomaId];\r\n        return (d.ipfsHash, d.owner, d.valid);\r\n    }\r\n}\r\n"
      }
    }
  }
}